name: ROCKs Organization Workflow

on:
  workflow_call:
    inputs:
      # Expects a list of combinations, referring to all the ROCKs to be built
      # This value is later on given to a "matrix"
      # The expected format is:
      #   [{'full_name': <ubuntu-rocks/repo>, 'name': <repo>, 'sha': <commit>, 'branch': <branch>}, ...]
      matrix_combinations:
        required: true
        type: string

jobs:
  rocks-ci-cd-pipeline:
    name: ROCK CI/CD build pipeline
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: 
        rock: ${{ fromJSON(inputs.matrix_combinations) }}
    steps:
      # Fetch GH App token for performing org operation during the pipeline
      - name: Get token for Organization Workflow
        id: get_token
        uses: machine-learning-apps/actions-app-token@master
        with:
          APP_PEM: ${{ secrets.APP_PEM }}
          APP_ID: ${{ secrets.APP_ID }}

      # Get the ROCK commit that triggered this run
      - name: Checkout ${{ matrix.rock.sha }} from the ROCK repo (${{ matrix.rock.full_name }}) on ${{ matrix.rock.branch }}
        uses: actions/checkout@v3
        with:
          repository: ${{ matrix.rock.full_name }}
          ref: ${{ matrix.rock.sha }}
          token: ${{ steps.get_token.outputs.app_token }}
          submodules: 'recursive'
          # Default: fetch-depth = 1

      # Announce to the ROCK commit that a build is starting
      - name: Report the start of the ROCK CI/CD pipeline 
        uses: LouisBrunner/checks-action@v1.1.1
        continue-on-error: true   # Checks API does not work with PAT, only GH Apps
        id: checks-build-start
        with:
          token: ${{ steps.get_token.outputs.app_token }}
          name: Building ROCK on ${{ matrix.rock.branch }}
          sha: ${{ matrix.rock.sha }}
          repo: ${{ matrix.rock.full_name }}
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          status: in_progress
          output: |
            {"summary": "Building, testing and publishing a new ROCK revision for ${{ matrix.rock.name }}, based on the changes from ${{ matrix.rock.sha }} in branch ${{ matrix.rock.branch }}"}

      # Get the ROCK CI/CD pipeline scripts
      - name: Checkout the ROCK CI/CD pipelines repository
        uses: actions/checkout@v3
        with:
          repository: ubuntu-rocks/rocks-pipelines
          ref: rocks-ci   # TODO: main
          token: ${{ secrets.SERVICE_ACCOUNT_PAT }}  # TODO replace by ${{ steps.get_token.outputs.app_token }}
          submodules: 'recursive'
          path: rocks-pipelines
          # Default: fetch-depth = 1

      - name: Prepare environment to run ROCKs CI/CD pipelines
        run: pip install -r ./rocks-pipelines/src/rocks/requirements.txt

      #### PREFLIGHT
      # Run ROCK preflight checks
      - name: Run preflight checks
        id: preflight-checks 
        run: ./rocks-pipelines/src/rocks/Preflight-Checks.sh

      # Announce the preflight checks have finished
      - name: Report that preflight checks have ended 
        uses: LouisBrunner/checks-action@v1.1.1
        continue-on-error: true   # Checks API does not work with PAT, only GH Apps
        with:
          token: ${{ steps.get_token.outputs.app_token }}
          name: Preflight checks completed
          sha: ${{ matrix.rock.sha }}
          repo: ${{ matrix.rock.full_name }}
          conclusion: success
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          output: |
            {"summary": "Preflight checks have completed with ${{ steps.preflight-checks.outcome }}"}

      #### INFER RISK
      # Get the risk for this ROCK
      - name: Infer risk
        id: infer-risk 
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            branch = "${{ matrix.rock.branch }}"
            # expected format is channels/<track>/<risk>/<...>
            supported_risks = ["edge", "beta", "candidate", "stable"]
            try:
              risk = branch.split("/")[2]
            except IndexError:
              # this means a risk was not provided
              # default to "edge"
              risk = "edge"
            
            if risk in supported_risks:
              print(f"::set-output name=risk::{risk}")
            else:
              raise Exception(f"Inferred unsupported risk {risk} from branch name {branch}.\
                Supported risks are: {supported_risks}")

      # Announce the inferred risk
      - name: Report the inferred risk
        uses: LouisBrunner/checks-action@v1.1.1
        continue-on-error: true   # Checks API does not work with PAT, only GH Apps
        with:
          token: ${{ steps.get_token.outputs.app_token }}
          name: Inferred risk = ${{ steps.infer-risk.outputs.risk }}
          sha: ${{ matrix.rock.sha }}
          repo: ${{ matrix.rock.full_name }}
          conclusion: success
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          output: |
            {"summary": "Building ROCK for risk '${{ steps.infer-risk.outputs.risk }}' (based on channel name ${{ matrix.rock.branch }})"}

      #### DETERMINE REVISION NUMBER
      # Get the next revision number for all ROCKs in this project
      - name: Determine ROCKs revision numbers
        id: determine-revisions
        run: |
          ./rocks-pipelines/src/rocks/Determine-Revisions.py --project-dir "${{ github.workspace }}"
          for rev in `ls *-revision`
          do
            echo "${rev}: $(cat $rev)"
          done

      # Announce the revision numbers are known
      - name: Report that the revision numbers have been determined
        uses: LouisBrunner/checks-action@v1.1.1
        continue-on-error: true   # Checks API does not work with PAT, only GH Apps
        with:
          token: ${{ steps.get_token.outputs.app_token }}
          name: Revision numbers determined
          sha: ${{ matrix.rock.sha }}
          repo: ${{ matrix.rock.full_name }}
          conclusion: success
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          output: |
            {"summary": "The revision numbers for the ROCKs in this commit have been determined with ${{ steps.determine-revisions.outcome }}"}

      #### BUILD
      # Build all ROCKs in this ROCK project/repo
      - name: Build ROCKs
        id: build-rocks
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker buildx create --use
          for rockcraft_yaml in `ls rockcraft.*.y[[:alnum:]]ml`
          do
            ./rocks-pipelines/src/rocks/Build.py --rockcraft-yaml "${rockcraft_yaml}" --risk ${{ steps.infer-risk.outputs.risk }}
          done
          echo "::set-output name=oci-archives::$(ls *.rock | sed -z 's/\n/ /g')"

      # Announce the build was successful
      - name: Report that the build was successful
        uses: LouisBrunner/checks-action@v1.1.1
        continue-on-error: true   # Checks API does not work with PAT, only GH Apps
        with:
          token: ${{ steps.get_token.outputs.app_token }}
          name: ROCKs builds successful
          sha: ${{ matrix.rock.sha }}
          repo: ${{ matrix.rock.full_name }}
          conclusion: success
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          output: |
            {"summary": "Successfully built and produced the following ROCKs OCI archives: ${{ steps.build-rocks.outputs.oci-archives }}"}

      #### TEST
      # Test all ROCKs in this ROCK project/repo
      ## Black-box-testing
      - name: Run Black-Box Tests
        id: black-box-testing
        run: |
          for rock_oci_archive in ${{ steps.build-rocks.outputs.oci-archives }}
          do
            ./rocks-pipelines/src/rocks/Black-Box-Test.py --rock-oci-archive "${rock_oci_archive}"
          done

      # Announce the Black-box-testing was successful
      - name: Report that the Black-box-testing was successful
        uses: LouisBrunner/checks-action@v1.1.1
        continue-on-error: true   # Checks API does not work with PAT, only GH Apps
        with:
          token: ${{ steps.get_token.outputs.app_token }}
          name: Black-box tests successful
          sha: ${{ matrix.rock.sha }}
          repo: ${{ matrix.rock.full_name }}
          conclusion: success
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          output: |
            {"summary": "Successfully performed the Black-box tests for: ${{ steps.build-rocks.outputs.oci-archives }}"}


      # -----------------------------------------------------
      # Announce to the ROCK commit that a build has finished
      - name: Report the end of the ROCK CI/CD pipeline 
        uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        continue-on-error: true   # Checks API does not work with PAT, only GH Apps
        with:
          token: ${{ steps.get_token.outputs.app_token }}
          check_id: ${{ steps.checks-build-start.outputs.check_id }}
          sha: ${{ matrix.rock.sha }}
          repo: ${{ matrix.rock.full_name }}
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          status: completed
          conclusion: ${{ job.status }}

  # # Wrap-up job
  # wrap-up:
  #   name: Wrap up after ROCK CI/CD pipeline execution
  #   needs: rocks-ci-cd-pipeline
  #   if: always()
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: 