name: ROCKs Organization Workflow

on:
  workflow_call:
    inputs:
      # Expects a list of combinations, referring to all the ROCKs to be built
      # This value is later on given to a "matrix"
      # The expected format is:
      #   [{'full_name': <ubuntu-rocks/repo>, 'name': <repo>, 'sha': <commit>, 'branch': <branch>}, ...]
      matrix_combinations:
        required: true
        type: string

jobs:
  rocks-ci-cd-pipeline:
    name: ROCK CI/CD build pipeline
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        rock: ${{ fromJSON(inputs.matrix_combinations) }}
    steps:
      # Fetch GH App token for performing org operation during the pipeline
      - name: Get token for Organization Workflow
        id: get_token
        uses: machine-learning-apps/actions-app-token@master
        with:
          APP_PEM: ${{ secrets.APP_PEM }}
          APP_ID: ${{ secrets.APP_ID }}

      # Get the ROCK commit that triggered this run
      - name: Checkout ${{ matrix.rock.sha }} from the ROCK repo (${{ matrix.rock.full_name }}) on ${{ matrix.rock.branch }}
        uses: actions/checkout@v3
        with:
          repository: ${{ matrix.rock.full_name }}
          ref: ${{ matrix.rock.sha }}
          token: ${{ steps.get_token.outputs.app_token }}
          submodules: 'recursive'
          # Default: fetch-depth = 1

      # Announce to the ROCK commit that a build is starting
      - name: Report the start of the ROCK CI/CD pipeline 
        uses: LouisBrunner/checks-action@v1.1.1
        continue-on-error: true   # Checks API does not work with PAT, only GH Apps
        id: checks-build-start
        with:
          token: ${{ steps.get_token.outputs.app_token }}
          name: Building ROCK on ${{ matrix.rock.branch }}
          sha: ${{ matrix.rock.sha }}
          repo: ${{ matrix.rock.full_name }}
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          status: in_progress
          output: |
            {"summary": "Building, testing and publishing a new ROCK revision for ${{ matrix.rock.name }}, based on the changes from ${{ matrix.rock.sha }} in branch ${{ matrix.rock.branch }}"}

      # Get the ROCK CI/CD pipeline scripts
      - name: Checkout the ROCK CI/CD pipelines repository
        uses: actions/checkout@v3
        with:
          repository: ubuntu-rocks/rocks-pipelines
          ref: rocks-ci   # TODO: main
          token: ${{ secrets.SERVICE_ACCOUNT_PAT }}  # TODO replace by ${{ steps.get_token.outputs.app_token }}
          submodules: 'recursive'
          path: rocks-pipelines
          # Default: fetch-depth = 1

      - name: Prepare environment to run ROCKs CI/CD pipelines
        run: pip install -r ./rocks-pipelines/src/rocks/requirements.txt

      # Run ROCK preflight checks
      - name: Run preflight checks
        id: preflight-checks 
        run: ./rocks-pipelines/src/rocks/Preflight-Checks.sh

      # Announce the preflight checks have finished
      - name: Report that preflight checks have ended 
        uses: LouisBrunner/checks-action@v1.1.1
        continue-on-error: true   # Checks API does not work with PAT, only GH Apps
        with:
          token: ${{ steps.get_token.outputs.app_token }}
          name: Preflight checks completed for ${{ matrix.rock.sha }} on ${{ matrix.rock.branch }}
          sha: ${{ matrix.rock.sha }}
          repo: ${{ matrix.rock.full_name }}
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          output: |
            {"summary": "Preflight checks have completed with: ${{ steps.preflight-checks.outcome }}"}

      # -----------------------------------------------------
      # Announce to the ROCK commit that a build has finished
      - name: Report the end of the ROCK CI/CD pipeline 
        uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        continue-on-error: true   # Checks API does not work with PAT, only GH Apps
        with:
          token: ${{ steps.get_token.outputs.app_token }}
          check_id: ${{ steps.checks-build-start.outputs.check_id }}
          sha: ${{ matrix.rock.sha }}
          repo: ${{ matrix.rock.full_name }}
          details_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          status: completed
          conclusion: ${{ job.status }}

  # # Wrap-up job
  # wrap-up:
  #   name: Wrap up after ROCK CI/CD pipeline execution
  #   needs: rocks-ci-cd-pipeline
  #   if: always()
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: 